<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Qt 花里胡哨系列（一）——QStyleSheet</title>
    <link href="/qt/style.html"/>
    <url>/qt/style.html</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>转眼间过去了大半个月没整理了，这期间一直在忙活着公司的事，也有不少心得体会，后续可以整理整理分享出来，这篇简单聊下qt中界面的美化（这里不提自绘图形，纯靠qt提供的方式）。</p><h3 id="QStyleSheet"><a href="#QStyleSheet" class="headerlink" title="QStyleSheet"></a>QStyleSheet</h3><p>鼓捣过前端的应该对css再熟悉不过了，当前现在又是less啊sass/scss什么的，当然归根结底还是css啊，只是写法不同罢了，就跟前端框架vue/react/angular什么的，在浏览器能展示的最终还是html+js+css（个人理解）。</p><p>客户端当然也有美化界面的需求了，毕竟哪怕是工厂用的现在界面也是有一定要求的，当然没网页审美这么高，像winform通过设置控件的背景色啊边框等等的属性来实现，wpf的话就类似html的写法，当然也是一个个属性。</p><p>回归本题，qt中实现样式调整的方式有两种，一个通过直接在设计器中设置QStyleSheet这一属性（当然也是属性，毕竟是客户端的一个个类），但是写法上就比较类似于css了，待会儿有示例可以看下，看完就会觉得，哦，挺熟悉；另外一种方式是通过加载qss文件来实现样式，两种方式各有各的利弊吧，简单来说就是<strong>QStyleSheet比较直观，所写即所得；qss规整，利于维护</strong>，当然缺点就是对应的互换，想想写html的时候没有一个css文件全都是在控件中写style的屎山般的痛苦。</p><p>前面既然说了类似css，那当然也存在父级控件样式（非指明类）适用子级，子级样式覆盖父级设置，简单来说就是父级设置了背景白色，子级不设置的就也是白色，设置了红色那子级就是红色。</p><p>个人推荐是如果工程界面相对较多，可以使用加载qss文件的方式，如果只有一两个界面并且控件也不是那么多的话，咋简单咋来。</p><h4 id="通用样式"><a href="#通用样式" class="headerlink" title="通用样式"></a>通用样式</h4><p>因为基本上控件都是基于Widget，所以大多数控件的样式设置基本类似，在qss中通配符表示所有的就是*（所以说跟css很像），通配符的用法如下表。</p><table><thead><tr><th align="center">通配符</th><th align="center">说明</th><th align="center">示例</th></tr></thead><tbody><tr><td align="center">*</td><td align="center">表示所有</td><td align="center">* {}</td></tr><tr><td align="center">类名</td><td align="center">表示所有属于这一类，可以理解为html中的class</td><td align="center">QWidget {}</td></tr><tr><td align="center">类</td><td align="center">只有这一类，不包含子类</td><td align="center">.QWidget {}</td></tr><tr><td align="center">属性选择</td><td align="center">所有属于这一类的且属性为所设置的</td><td align="center">QPushButton[flat==”false”] {}</td></tr><tr><td align="center">#名称</td><td align="center">表示这个控件</td><td align="center">#pushButton1 {}</td></tr><tr><td align="center">类中类</td><td align="center">父类中包含子类的所有</td><td align="center">QWidget QPushButton {}</td></tr></tbody></table><p>常用属性如下（越写越多，用的时候边查边用吧）。</p><ul><li>margin</li><li>padding</li><li>background</li><li>background-color</li><li>border</li><li>font</li><li>color</li><li>…</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs css">* &#123;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">outline</span>: <span class="hljs-number">0px</span>;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-number">#F5F7FA</span>;<br>    <span class="hljs-attribute">border</span>: none;<br>    <span class="hljs-attribute">font</span>: normal <span class="hljs-number">12px</span> <span class="hljs-string">&quot;微软雅黑&quot;</span>;<br>&#125;<br><br>QWidget &#123;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-number">#F5F7FA</span>;<br>&#125;<br><br><span class="hljs-selector-id">#pushButton_1</span> &#123;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-number">#438CFF</span>;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">0px</span>;<br>    <span class="hljs-attribute">border-bottom-left-radius</span>:<span class="hljs-number">6px</span>;<br>    <span class="hljs-attribute">border-top-left-radius</span>:<span class="hljs-number">6px</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="其他特殊的"><a href="#其他特殊的" class="headerlink" title="其他特殊的"></a>其他特殊的</h4><p>另外对于不同的控件，也有不同的状态样式，例如按钮的点击、鼠标悬浮、禁用，单选/多选的选中，下拉的箭头，选项卡的选项按钮等等。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#pushButton_1</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">67</span>,<span class="hljs-number">140</span>,<span class="hljs-number">255</span>,<span class="hljs-number">0.7</span>);<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#FFFFFF</span>;<br>&#125;<br><br><span class="hljs-selector-id">#pushButton_1</span><span class="hljs-selector-pseudo">:checked</span>  &#123;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">67</span>,<span class="hljs-number">140</span>,<span class="hljs-number">255</span>,<span class="hljs-number">0.8</span>);<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#FFFFFF</span>;<br>&#125;<br><br><span class="hljs-selector-id">#pushButton_1</span>:pressed &#123;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-number">#FF5722</span>;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#FFFFFF</span>;<br>&#125;<br><br>QPushButton<span class="hljs-selector-pseudo">:disabled</span>&#123;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-number">#909399</span>;<br>&#125;<br><br>QRadioButton&#123;<br>    spacing: <span class="hljs-number">2px</span>;<br>    <span class="hljs-attribute">color</span>: white;<br>&#125;<br><br>QRadioButton::indicator &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">45px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;<br>&#125;<br><br>QRadioButton::indicator:unchecked &#123;<br>    image: <span class="hljs-built_in">url</span>(<span class="hljs-string">:/image/off.png</span>);<br>&#125;<br><br>QRadioButton::indicator:checked &#123;<br>    image: <span class="hljs-built_in">url</span>(<span class="hljs-string">:/image/on.png</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs css">QListWidget &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#606266</span>;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#DCDFE6</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;<br>&#125;<br><br><span class="hljs-comment">/**列表项*/</span><br>QListWidget::item &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#606266</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;<br>&#125;<br><br><span class="hljs-comment">/**列表项扫过*/</span><br>QListWidget::item:hover, QTreeWidget::item:hover &#123;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-number">#70B6FF</span>;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#FFFFFF</span>;<br>&#125;<br><br><span class="hljs-comment">/**列表项选中*/</span><br>QListWidget::item::selected:active &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#FFFFFF</span>;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-number">#409EFF</span>;<br>    <span class="hljs-attribute">border</span>: none;<br>&#125;<br><br>QListWidget::item:selected &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#FFFFFF</span>;<br>    <span class="hljs-attribute">border</span>: none;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-number">#409EFF</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs css">QComboBox, QFontComboBox, QLineEdit, QTextEdit &#123;<br>   <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#BBBBBB</span>;<br>   <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">6px</span>;<br>   <span class="hljs-attribute">background</span>: transparent;<br>   <span class="hljs-attribute">color</span>: <span class="hljs-number">#606266</span>;<br>   <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;<br>   <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">5px</span> <span class="hljs-number">0</span> <span class="hljs-number">10px</span>;<br>&#125;<br><br><span class="hljs-comment">/*下拉框的显示框效果*/</span><br>QComboBox QAbstractItemView, QFontComboBox QAbstractItemView &#123;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-number">#FFFFFF</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">20px</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span> <span class="hljs-number">10px</span> <span class="hljs-number">10px</span> <span class="hljs-number">10px</span>;<br>    <span class="hljs-attribute">outline</span>: <span class="hljs-number">0px</span>;<br>&#125;<br><br>QComboBox::down-arrow, QFontComboBox::down-arrow &#123;<br>    image: <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;:/image/under.png&quot;</span>);<br>&#125;<br><br>QComboBox QAbstractItemView::item, QFontComboBox QAbstractItemView::item &#123;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">3px</span>;<br>&#125;<br><br>QComboBox QAbstractItemView::item:hover, QFontComboBox QAbstractItemView::item:hover &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#FFFFFF</span>;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#409EFF</span>;<br>&#125;<br><br>QComboBox QAbstractItemView::item:selected, QFontComboBox QAbstractItemView::item:selected &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#FFFFFF</span>;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#409EFF</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs css">QSpinBox, QDoubleSpinBox&#123;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#707070</span>;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">4px</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">3px</span> <span class="hljs-number">5px</span> <span class="hljs-number">3px</span> <span class="hljs-number">5px</span>;<br>    <span class="hljs-attribute">background</span>: none;<br>    selection-<span class="hljs-attribute">background-color</span>: <span class="hljs-number">#409EFF</span>;<br>    selection-<span class="hljs-attribute">color</span>: <span class="hljs-number">#FFFFFF</span>;<br>&#125;<br><br>QSpinBox::up-button, QDoubleSpinBox::up-button &#123;<br>    image:<span class="hljs-built_in">url</span>(<span class="hljs-string">:/image/add_top.png</span>);<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">15px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">10px</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">3px</span> <span class="hljs-number">5px</span> <span class="hljs-number">3px</span> ;<br><br>&#125;<br>QSpinBox::down-button, QDoubleSpinBox::down-button &#123;<br>    image:<span class="hljs-built_in">url</span>(<span class="hljs-string">:/image/add_bottom.png</span>);<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">15px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">10px</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">3px</span> <span class="hljs-number">5px</span> <span class="hljs-number">3px</span> ;<br>&#125;<br></code></pre></td></tr></table></figure><div class="note note-warning">            <p>有些特殊的样式属性需要留意下，例如设置图片，有多种方式，可以通过直接设置pixmap，也可以通过background:url()，推荐使用border-image:url()，这三种方式的效果可以自己测试下（当然也是根据需要）。</p>          </div><p>因为样式这个东西，具体实现需要调整哪些还是比较麻烦的，也比较多，这东西最好还是用到了去查手册，qt安装之后有个<strong>assistant.exe</strong>，可以在这个助手中查找很多相关的资料。</p><p><img src="./style/1.png" alt="手册查找stylesheet"></p><h4 id="加载字体"><a href="#加载字体" class="headerlink" title="加载字体"></a>加载字体</h4><p>样式调完了，肯定会有人觉得这个默认字体不好（当然qt支持字体选择，具体有哪些就可以自己在设计器里字体那一栏找了，那个下拉基本上是你电脑已经安装的字体），当然也可以动态加载字体文件来设置全局字体，比如在网上找了个比较华丽的字体，我们怎么加载呢，可以直接通过一段代码来直接用，注意路径就行。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> fontId = QFontDatabase::<span class="hljs-built_in">addApplicationFont</span>(<span class="hljs-string">&quot;./FONT/weiruan.ttf&quot;</span>);<br><span class="hljs-keyword">if</span> (fontId &gt;= <span class="hljs-number">0</span>)<br>&#123;<br>    QString fontName = QFontDatabase::<span class="hljs-built_in">applicationFontFamilies</span>(fontId).<span class="hljs-built_in">at</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-function">QFont <span class="hljs-title">font</span><span class="hljs-params">(fontName)</span></span>;<br>    QApplication::<span class="hljs-built_in">setFont</span>(font);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>好了，花里胡哨的一篇样式篇就这样结束了，为啥没放实现的效果图呢，因为我觉得我这审美还是别拿出来秀了，真是想鼓捣客户端的界面，其实也可以参考很多前端样式，像ant啊element之类的，毕竟人家大厂出品相对精品嘛，但是也不要过于追求花里胡哨，毕竟gui还是别要求太高了，有时候为了一个特效画个三五天不值当，当然仁者见仁，这事不好说。</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>qt</category>
      
    </categories>
    
    
    <tags>
      
      <tag>qt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Qt 系列（八）——统计图</title>
    <link href="/qt/chart.html"/>
    <url>/qt/chart.html</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本来不打算搞这篇，因为觉得客户端嘛，主要都是写业务功能操作，搞什么花里胡哨的东西，后来业务还真是要用到了，就简单聊下这玩意儿吧。</p><h3 id="Qt中的统计图"><a href="#Qt中的统计图" class="headerlink" title="Qt中的统计图"></a>Qt中的统计图</h3><p>接触过ECharts的应该就不需要了解太多了，常规用到的统计图一般为<strong>折线图、柱状图、饼图、散点图</strong>，当然ECharts中会有更花里胡哨的，什么地图啊，三维立体图啊等等。</p><p>一个统计图拆解成几部分基本上就是：标题、网格、坐标系、坐标系说明、图形（这个图形比较笼统），当然还有诸如图例啊、标注文本之类的。</p><p>qt中需要用到<strong>QChartView</strong>作为容器，然后<strong>QChart</strong>来绘制图形，具体是哪种都是通过<strong>QxxxSeries</strong>来实现，下来我们来看下qt中绘制这种统计图的实现方式。</p><p>首先还是需要在工程属性加上<strong>charts</strong>，配置方式同<a href="/qt/database.html">数据库</a>，都是添加个插件库，这里就不多说了。</p><p>基础的用法就是放一个窗口，然后声明个QChartView放到这个窗口中，具体是哪种类型的统计图就看业务了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;TestCharts.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QGridLayout&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QLineSeries&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QStackedBarSeries&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QBarSet&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QBarCategoryAxis&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QValueAxis&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QPieSeries&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TestCharts::bindData</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    QGridLayout* baseLayout = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QGridLayout</span>();<br>    QChartView* view;<br><br>    view = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QChartView</span>(<span class="hljs-built_in">createLineChart</span>());<br><br>    baseLayout-&gt;<span class="hljs-built_in">addWidget</span>(view);<br>    ui-&gt;groupBox-&gt;<span class="hljs-built_in">setLayout</span>(baseLayout);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="折线图"><a href="#折线图" class="headerlink" title="折线图"></a>折线图</h4><p>折线图一般用于看趋势走向，像大盘啊心电图啊收入支出之类的。</p><p><strong>QLineSeries</strong>为折线图的实现类，添加二维点数据，每声明一次放入就是一条折线。</p><p>如果先自定义坐标系值下面会做一个，这里因为是先录入的数据，就可以直接调用QChart的方法生成默认坐标系，默认是按照数据中最大x,y来定义。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">QChart* <span class="hljs-title">TestCharts::createLineChart</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    QChart* chart = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QChart</span>();<br>    chart-&gt;<span class="hljs-built_in">setTitle</span>(<span class="hljs-string">&quot;Line chart&quot;</span>);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>        QLineSeries* series = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QLineSeries</span>(chart);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">20</span>; j++) &#123;<br>            <span class="hljs-keyword">if</span> (j % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)<br>            &#123;<br>                series-&gt;<span class="hljs-built_in">append</span>(j + i, j * <span class="hljs-number">0.2</span>);<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                series-&gt;<span class="hljs-built_in">append</span>(j + i, j * <span class="hljs-number">0.5</span>);<br>            &#125;<br>        &#125;<br>        series-&gt;<span class="hljs-built_in">setName</span>(<span class="hljs-built_in">QString</span>(<span class="hljs-string">&quot;d%1&quot;</span>).<span class="hljs-built_in">arg</span>(i));<br>        chart-&gt;<span class="hljs-built_in">addSeries</span>(series);<br>    &#125;<br><br>    chart-&gt;<span class="hljs-built_in">createDefaultAxes</span>();<br>    <span class="hljs-keyword">return</span> chart;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="./chart/1.png" alt="龙飞凤舞"></p><h4 id="柱状图"><a href="#柱状图" class="headerlink" title="柱状图"></a>柱状图</h4><p>柱状图一般像文章的阅读量啊评论数啊，需要看每个单独的统计时用到的比较多。</p><p><strong>QStackedBarSeries</strong>为柱状图的实现类，<strong>QBarSet</strong>是每条柱，这个只需要y轴数据。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">QChart* <span class="hljs-title">TestCharts::createBarChart</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    QChart* chart = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QChart</span>();<br>    chart-&gt;<span class="hljs-built_in">setTitle</span>(<span class="hljs-string">&quot;Bar chart&quot;</span>);<br><br>    QStackedBarSeries* series = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QStackedBarSeries</span>(chart);<br>    <span class="hljs-comment">//for (int i = 0; i &lt; 2; i++) &#123; // 这个控制一块摞几个</span><br>        QBarSet* set = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QBarSet</span>(<span class="hljs-built_in">QString</span>(<span class="hljs-string">&quot;data&quot;</span>));<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">3</span>; j++)<br>        &#123;<br>            set-&gt;<span class="hljs-built_in">append</span>(j * <span class="hljs-number">5</span>);<br>        &#125;<br>        series-&gt;<span class="hljs-built_in">append</span>(set);<br>    <span class="hljs-comment">//&#125;</span><br>    chart-&gt;<span class="hljs-built_in">addSeries</span>(series);<br><br>    QBarCategoryAxis* axisX = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QBarCategoryAxis</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)<br>    &#123;<br>        axisX-&gt;<span class="hljs-built_in">append</span>(<span class="hljs-built_in">QString</span>(<span class="hljs-string">&quot;data_%1&quot;</span>).<span class="hljs-built_in">arg</span>(i));<br>    &#125;<br>    QValueAxis* axisY = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QValueAxis</span>();<br>    axisY-&gt;<span class="hljs-built_in">setRange</span>(<span class="hljs-number">0</span>, <span class="hljs-number">20</span>);<br>    axisY-&gt;<span class="hljs-built_in">setTitleText</span>(QString::<span class="hljs-built_in">fromLocal8Bit</span>(<span class="hljs-string">&quot;test&quot;</span>));<br>    axisY-&gt;<span class="hljs-built_in">setLabelFormat</span>(<span class="hljs-built_in">QString</span>(<span class="hljs-string">&quot;%.2f%&quot;</span>));<br>    axisY-&gt;<span class="hljs-built_in">setLabelsColor</span>(<span class="hljs-built_in">QColor</span>(<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>));<br>    axisY-&gt;<span class="hljs-built_in">setTitleBrush</span>(<span class="hljs-built_in">QBrush</span>(<span class="hljs-built_in">QColor</span>(<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)));<br><br>    chart-&gt;<span class="hljs-built_in">setAxisX</span>(axisX, series);<br>    chart-&gt;<span class="hljs-built_in">setAxisY</span>(axisY, series);<br>    <span class="hljs-keyword">return</span> chart;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="./chart/2.png" alt="柱状图"></p><h4 id="扇形图"><a href="#扇形图" class="headerlink" title="扇形图"></a>扇形图</h4><p>这个就是看一个占用比例关系，像迟到/旷工/打卡人数这种。</p><p><strong>QPieSeries</strong>为扇形图实现类，<strong>QPieSlice</strong>是每个扇形的实现类，这个也是只需要一个数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">QChart* <span class="hljs-title">TestCharts::createPieChart</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    QChart* chart = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QChart</span>();<br>    chart-&gt;<span class="hljs-built_in">setTitle</span>(<span class="hljs-string">&quot;Pie chart&quot;</span>);<br><br>    <span class="hljs-type">int</span> total = <span class="hljs-number">3</span>;<br>    qreal pieSize = <span class="hljs-number">1.0</span> / (qreal)total;<br>    QPieSeries* series = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QPieSeries</span>(chart);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; total; i++) &#123;<br>        QPieSlice* slice = series-&gt;<span class="hljs-built_in">append</span>(<span class="hljs-built_in">QString</span>(<span class="hljs-string">&quot;d%1&quot;</span>).<span class="hljs-built_in">arg</span>(i), <span class="hljs-number">3</span> + i);<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span>) &#123;<br>            slice-&gt;<span class="hljs-built_in">setLabelVisible</span>();<br>            slice-&gt;<span class="hljs-built_in">setExploded</span>();<br>        &#125;<br>        <span class="hljs-comment">//qreal hPos = (pieSize / 2) + (i / (qreal)total);</span><br>        <span class="hljs-comment">//series-&gt;setPieSize(pieSize);</span><br>        <span class="hljs-comment">//series-&gt;setHorizontalPosition(hPos);</span><br>        <span class="hljs-comment">//series-&gt;setVerticalPosition(0.5);</span><br>    &#125;<br>    chart-&gt;<span class="hljs-built_in">addSeries</span>(series);<br>    <span class="hljs-keyword">return</span> chart;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="./chart/3.png" alt="饼图"></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>大致的用法就是这些，另外像主题色，背景色这些花里胡哨的，后续用的多了再整理吧，到此基本上qt的常规用法写个demo什么的应该是没啥问题了。</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>qt</category>
      
    </categories>
    
    
    <tags>
      
      <tag>qt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Qt 系列（七）——数据库</title>
    <link href="/qt/database.html"/>
    <url>/qt/database.html</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>数据存储这块儿不管是B/S还是C/S都是少不了的，而qt中直接有现成的链接数据库的类，当然适配的应该不至于跟Orm一样花里胡哨，常规的<strong>Sqllite，SqlServer，Mysql</strong>啥的是没问题的。</p><h3 id="Qt连接数据库"><a href="#Qt连接数据库" class="headerlink" title="Qt连接数据库"></a>Qt连接数据库</h3><p>qt支持的数据库个人常用的驱动名称如下：</p><table><thead><tr><th>驱动类别</th><th>对应数据库</th></tr></thead><tbody><tr><td>QSQLITE</td><td>SQLLITE3以上</td></tr><tr><td>QODBC</td><td>SQLSERVER</td></tr><tr><td>QMYSQL</td><td>MYSQL</td></tr></tbody></table><h4 id="配置工程"><a href="#配置工程" class="headerlink" title="配置工程"></a>配置工程</h4><p>首先来看下如何配置工程，QCreator的话在pro文件中找到<strong>QT +=</strong> 这句。</p><figure class="highlight qt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs qt">QT += core gui sql<br></code></pre></td></tr></table></figure><p>vs的话，类似，在工程属性页对应下图配置。</p><p><img src="./database/1.png" alt="配置"></p><h4 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h4><p>接下来就可以来实现连接了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// .h</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QString&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QtSql/QSqlDatabase&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QtSql/QtSql&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QtSql/QSqlQuery&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CSqlLiteManager</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">CSqlLiteManager</span>();<br>    ~<span class="hljs-built_in">CSqlLiteManager</span>();<br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">connectToDb</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isConnected</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-keyword">private</span>:<br>    QSqlDatabase m_connect;<br>    <span class="hljs-type">bool</span> m_isConnected = <span class="hljs-literal">false</span>;<br>&#125;;<br><br><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// .cpp</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">CSqlLiteManager::connectToDb</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (QSqlDatabase::<span class="hljs-built_in">contains</span>(<span class="hljs-string">&quot;qt_sql_default_connection&quot;</span>))<br>    &#123;<br>        m_connect = QSqlDatabase::<span class="hljs-built_in">database</span>(<span class="hljs-string">&quot;qt_sql_default_connection&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        m_connect = QSqlDatabase::<span class="hljs-built_in">addDatabase</span>(<span class="hljs-string">&quot;QSQLITE&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!m_connect.<span class="hljs-built_in">isValid</span>())<br>    &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;connect sqllite failed&quot;</span> &lt;&lt; std::endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    m_connect.<span class="hljs-built_in">setDatabaseName</span>(<span class="hljs-string">&quot;test.db&quot;</span>);<br>    <span class="hljs-keyword">if</span> (!m_connect.<span class="hljs-built_in">open</span>())<br>    &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;open sqllite failed&quot;</span> &lt;&lt; std::endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>调用这个类然后运行程序，不出意外的话会有如下提示（当然如果已经配置了环境变量之类的可能会直接成功）：</p><p><img src="./database/2.png" alt="未加载sqllite"></p><p>找到qt类库目录，然后从plugins拷走<strong>sqldrivers</strong>到运行程序目录下，对应层级设置好（个人习惯在exe同层新建plugins然后放置对应qt的插件库）。</p><p>在main.cpp中添加读取插件库的方法。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">QApplication <span class="hljs-title">a</span><span class="hljs-params">(argc, argv)</span></span>;<br>    QString strLibPath = a.<span class="hljs-built_in">applicationDirPath</span>();<br>    strLibPath += <span class="hljs-string">&quot;/plugins/&quot;</span>;<br>    a.<span class="hljs-built_in">addLibraryPath</span>(strLibPath);<br>    QtDemo w;<br>    w.<span class="hljs-built_in">show</span>();<br>    <span class="hljs-keyword">return</span> a.<span class="hljs-built_in">exec</span>();<br>&#125;<br><br></code></pre></td></tr></table></figure><p>再运行程序就可以看到对应目录下有个<strong>test.db</strong>这个数据库。</p><h4 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h4><p>新建的数据库里肯定都是空的，所以需要来张表操作下，可以通过数据库管理工具（SQLLite Expert啊，Navicat之类的），这里用的sqllite就直接建个表了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CSqlLiteManager::createTable</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    QSqlQuery query;<br>    query.<span class="hljs-built_in">exec</span>(<span class="hljs-built_in">QString</span>(<span class="hljs-string">&quot;select count(1) from sqlite_master where type=&#x27;table&#x27; and name=&#x27;person&#x27;&quot;</span>));<br>    <span class="hljs-keyword">if</span> (query.<span class="hljs-built_in">next</span>())<br>    &#123;<br>        <span class="hljs-keyword">if</span> (query.<span class="hljs-built_in">value</span>(<span class="hljs-number">0</span>).<span class="hljs-built_in">toInt</span>() == <span class="hljs-number">0</span>)<br>        &#123;<br>            QString create_sql = <span class="hljs-string">&quot;create table person (id integer primary key autoincrement, number varchar(10), name varchar(20), utype int, addtime datetime default (datetime(&#x27;now&#x27;, &#x27;localtime&#x27;)))&quot;</span>;<br>            query.<span class="hljs-built_in">prepare</span>(create_sql);<br>            <span class="hljs-keyword">if</span> (!query.<span class="hljs-built_in">exec</span>())<br>            &#123;<br>                std::cout &lt;&lt; <span class="hljs-string">&quot;create table failed  &quot;</span> &lt;&lt; query.<span class="hljs-built_in">lastError</span>().<span class="hljs-built_in">text</span>().<span class="hljs-built_in">toStdString</span>() &lt;&lt; endl;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;select table failed  &quot;</span> &lt;&lt; query.<span class="hljs-built_in">lastError</span>().<span class="hljs-built_in">text</span>().<span class="hljs-built_in">toStdString</span>() &lt;&lt; std::endl;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><div class="note note-warning">            <p>通过<strong>QSqlQuery.lastError()</strong> 可以获取到执行的错误信息，方便排查问题。</p>          </div><p>运行程序，然后我们通过个工具来看下是否建表完成。</p><p><img src="./database/3.png" alt="建表完成"></p><h4 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h4><blockquote><p>所有的数据相关离不开增删改查，crud工程师的必备技能。</p></blockquote><p>这部分基本上直接上代码了，对应的扩展可以自行臆想。</p><h5 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">CSqlLiteManager::insertData</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">bool</span> ret = <span class="hljs-literal">false</span>;<br>    QSqlQuery query;<br>    QString sql = <span class="hljs-built_in">QString</span>(<span class="hljs-string">&quot;insert into person (%1) values(&#x27;%2&#x27;,&#x27;%3&#x27;,%4,&#x27;%5&#x27;)&quot;</span>)<br>        .<span class="hljs-built_in">arg</span>(<span class="hljs-string">&quot;`number`,`name`,`utype`,`addtime`&quot;</span>)<br>        .<span class="hljs-built_in">arg</span>(<span class="hljs-string">&quot;100001&quot;</span>)<br>        .<span class="hljs-built_in">arg</span>(<span class="hljs-string">&quot;test01&quot;</span>)<br>        .<span class="hljs-built_in">arg</span>(<span class="hljs-number">1</span>)<br>        .<span class="hljs-built_in">arg</span>(QDateTime::<span class="hljs-built_in">currentDateTime</span>().<span class="hljs-built_in">toString</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));<br>    <span class="hljs-keyword">if</span> (query.<span class="hljs-built_in">exec</span>(sql))<br>    &#123;<br>        ret = <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;insertData error: &quot;</span> &lt;&lt; query.<span class="hljs-built_in">lastError</span>().<span class="hljs-built_in">text</span>().<span class="hljs-built_in">toStdString</span>() &lt;&lt; std::endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">CSqlLiteManager::updateData</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">bool</span> ret = <span class="hljs-literal">false</span>;<br>    QSqlQuery query;<br>    QString sql = <span class="hljs-built_in">QString</span>(<span class="hljs-string">&quot;update person set `name`=&#x27;test0002&#x27; where id=%1&quot;</span>)<br>        .<span class="hljs-built_in">arg</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span> (query.<span class="hljs-built_in">exec</span>(sql))<br>    &#123;<br>        ret = <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;updateData error: &quot;</span> &lt;&lt; query.<span class="hljs-built_in">lastError</span>().<span class="hljs-built_in">text</span>().<span class="hljs-built_in">toStdString</span>() &lt;&lt; std::endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">CSqlLiteManager::deleteData</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">bool</span> ret = <span class="hljs-literal">false</span>;<br>    QSqlQuery query;<br>    QString sql = <span class="hljs-built_in">QString</span>(<span class="hljs-string">&quot;delete from person where id=%1&quot;</span>)<br>        .<span class="hljs-built_in">arg</span>(<span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">if</span> (query.<span class="hljs-built_in">exec</span>(sql))<br>    &#123;<br>        ret = <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;deleteData error: &quot;</span> &lt;&lt; query.<span class="hljs-built_in">lastError</span>().<span class="hljs-built_in">text</span>().<span class="hljs-built_in">toStdString</span>() &lt;&lt; std::endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">std::vector&lt;DbViewItem&gt; <span class="hljs-title">CSqlLiteManager::getData</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    std::vector&lt;DbViewItem&gt; data;<br>    <span class="hljs-function">QSqlQuery <span class="hljs-title">query</span><span class="hljs-params">(m_connect)</span></span>;<br>    QString sql = <span class="hljs-built_in">QString</span>(<span class="hljs-string">&quot;select * from person order by addtime desc&quot;</span>);<br>    <span class="hljs-keyword">if</span> (query.<span class="hljs-built_in">exec</span>(sql))<br>    &#123;<br>        <span class="hljs-keyword">while</span> (query.<span class="hljs-built_in">next</span>())<br>        &#123;<br>            DbViewItem item;<br>            item.id = query.<span class="hljs-built_in">value</span>(<span class="hljs-string">&quot;id&quot;</span>).<span class="hljs-built_in">toInt</span>();<br>            item.number = query.<span class="hljs-built_in">value</span>(<span class="hljs-string">&quot;number&quot;</span>).<span class="hljs-built_in">toString</span>();<br>            item.name = query.<span class="hljs-built_in">value</span>(<span class="hljs-string">&quot;name&quot;</span>).<span class="hljs-built_in">toString</span>();<br>            item.utype = query.<span class="hljs-built_in">value</span>(<span class="hljs-string">&quot;utype&quot;</span>).<span class="hljs-built_in">toInt</span>();<br>            item.addtime = query.<span class="hljs-built_in">value</span>(<span class="hljs-string">&quot;addtime&quot;</span>).<span class="hljs-built_in">toDateTime</span>();<br>            data.<span class="hljs-built_in">push_back</span>(item);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> data;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="./database/4.png" alt="查询数据"></p><h4 id="多线程使用"><a href="#多线程使用" class="headerlink" title="多线程使用"></a>多线程使用</h4><p>如果在多线程中，为了保持单连接，要用到单例（设计模式这块儿后续有时间再缕），当然也可以一直做短连接，连接-&gt;执行-&gt;断开，不过一般不习惯这种操作，直接一个长连接保持就行。</p><p>在执行sql时进行锁操作，防止多个线程调用同一资源造成的冲突。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// .h</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;mutex&gt;</span></span><br><br><span class="hljs-comment">// …省略其他</span><br><span class="hljs-keyword">private</span>:<br>    std::mutex lock_mutex;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">CSqlLiteManager::insertData</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">bool</span> ret = <span class="hljs-literal">false</span>;<br>    lock_mutex.<span class="hljs-built_in">lock</span>(); <span class="hljs-comment">// 加锁</span><br>    QSqlQuery query;<br>    QString sql = <span class="hljs-built_in">QString</span>(<span class="hljs-string">&quot;insert into person (%1) values(&#x27;%2&#x27;,&#x27;%3&#x27;,%4,&#x27;%5&#x27;)&quot;</span>)<br>        .<span class="hljs-built_in">arg</span>(<span class="hljs-string">&quot;`number`,`name`,`utype`,`addtime`&quot;</span>)<br>        .<span class="hljs-built_in">arg</span>(<span class="hljs-string">&quot;100001&quot;</span>)<br>        .<span class="hljs-built_in">arg</span>(<span class="hljs-string">&quot;test01&quot;</span>)<br>        .<span class="hljs-built_in">arg</span>(<span class="hljs-number">1</span>)<br>        .<span class="hljs-built_in">arg</span>(QDateTime::<span class="hljs-built_in">currentDateTime</span>().<span class="hljs-built_in">toString</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));<br>    <span class="hljs-keyword">if</span> (query.<span class="hljs-built_in">exec</span>(sql))<br>    &#123;<br>        ret = <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;insertData error: &quot;</span> &lt;&lt; query.<span class="hljs-built_in">lastError</span>().<span class="hljs-built_in">text</span>().<span class="hljs-built_in">toStdString</span>() &lt;&lt; std::endl;<br>    &#125;<br>    lock_mutex.<span class="hljs-built_in">unlock</span>(); <span class="hljs-comment">// 解锁</span><br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="多个数据库"><a href="#多个数据库" class="headerlink" title="多个数据库"></a>多个数据库</h4><p>有些业务比较复杂的，可能会用到多个/多类数据库，如本地sqllite，远程mysql之类的，在一个工程里如果使用多个数据库，要留意几个问题，一个是<strong>QSqlQuery</strong>的声明，另一个是<strong>QSqlDatabase::addDatabase()</strong> 。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++">m_connect = QSqlDatabase::<span class="hljs-built_in">addDatabase</span>(<span class="hljs-string">&quot;QSQLITE&quot;</span>,<span class="hljs-string">&quot;localdb&quot;</span>); <span class="hljs-comment">// 第二个参数是连接串名称，保持唯一</span><br><span class="hljs-function">QSqlQuery <span class="hljs-title">query</span><span class="hljs-params">(m_connect)</span></span>; <span class="hljs-comment">// 指定Query是用哪个连接</span><br></code></pre></td></tr></table></figure><div class="note note-warning">            <p>相当于是谁的执行用谁的连接，不指定就按照默认的连接（也就是第一个连接），如果工程只有一个数据库连接那就不需要再这么麻烦，当然写上最好，毕竟规范嘛。</p>          </div><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>大体上数据库相关的操作基本上基础的就是这些，像分页啊查询条件啊聚合啊等等都是看看sql教程就行了，程序这块儿没有啥太多其他的操作，不过有些像数据绑定界面列表这种操作，因人而异吧，个人比较习惯自己写个结构体来接收然后自解析做绑定，后续有新的体会了会再更新调整。</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>qt</category>
      
    </categories>
    
    
    <tags>
      
      <tag>qt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Qt 系列（六）——表单</title>
    <link href="/qt/form.html"/>
    <url>/qt/form.html</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>出个差出的状态都没了，每次回来都得缓个一段时间，这篇主要聊下qt中表单控件的常规使用，也是个基础的玩意儿。</p><h3 id="表单控件"><a href="#表单控件" class="headerlink" title="表单控件"></a>表单控件</h3><p>常规使用的表单控件如：单行文本，多行文本，单选，多选，下拉，日期、时间选择等，在qt中对应的就是<strong>QLineEdit,QTextEdit,QRadioButton,QCheckBox,QComboBox,QDateEdit/QDateTimeEdit</strong>之类。</p><p>像下图这样搞一个demo界面，然后我们来看这一个个控件。</p><p> <img src="./form/1.png" height="400" /></p><h4 id="QLineEdit"><a href="#QLineEdit" class="headerlink" title="QLineEdit"></a>QLineEdit</h4><p>单行文本，可以通过<strong>setText()</strong> 来设置文本内容（<strong>insert()</strong> 也可以不过没有特殊需求就不常用），<strong>text()</strong> 来获取文本内容，<strong>setPlaceholderText()</strong> 设置提示文本内容。</p><p>输入框一般对应的事件常用的就是<strong>textChanged()</strong> 。</p><p>echoMode可以设置显示模式，根据需要来设置。</p><table><thead><tr><th>显示</th><th>作用</th></tr></thead><tbody><tr><td>Normal</td><td>普通文本，可正常显示输入内容</td></tr><tr><td>NoEcho</td><td>不显示输入内容，类似linux下输入密码</td></tr><tr><td>Password</td><td>密码文本，隐藏输入内容，用圆点代替</td></tr><tr><td>PasswordEchoOnEdit</td><td>也是密码文本，在输入时/聚焦时显示内容，失去焦点后显示为密码文本</td></tr></tbody></table><p><strong>setValidator()</strong> 用来设置输入限制，例如只能输整数/小数或者其他限制之类的，常用的验证器像内置的<strong>QIntValidator，QDoubleValidator</strong>，需要自定义的就可以用<strong>QRegExpValidator</strong>这个正则限制，通过自定义正则表达式来限制输入。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 整数 [0~5]</span><br>QValidator* validator1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QIntValidator</span>(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>, <span class="hljs-keyword">this</span>);<br><span class="hljs-comment">// 小数 [0~300] 一位小数</span><br>QDoubleValidator* validator4 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QDoubleValidator</span>(<span class="hljs-number">0</span>, <span class="hljs-number">300</span>, <span class="hljs-number">1</span>, <span class="hljs-keyword">this</span>);<br>validator4-&gt;<span class="hljs-built_in">setNotation</span>(QDoubleValidator::StandardNotation);<br><span class="hljs-comment">// 字符+数字</span><br><span class="hljs-function">QRegExp <span class="hljs-title">reg</span><span class="hljs-params">(<span class="hljs-string">&quot;[a-zA-Z0-9]+$&quot;</span>)</span></span>;<br>QRegExpValidator* pValidator = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QRegExpValidator</span>(<span class="hljs-keyword">this</span>);<br>pValidator-&gt;<span class="hljs-built_in">setRegExp</span>(reg);<br></code></pre></td></tr></table></figure><h4 id="QTextEdit"><a href="#QTextEdit" class="headerlink" title="QTextEdit"></a>QTextEdit</h4><p>多行文本，与QLineEdit用法类似，不过这个可以支持富文本，也可以写html文本，一个**setPlainText()<strong>，另一个</strong>setHtml()<strong>，对应的获取方法</strong>toPlainText()，toHtml()**，其他的像获取光标位置，插入文本，设置字体样式等等就不多说了。</p><h4 id="QRadioButton"><a href="#QRadioButton" class="headerlink" title="QRadioButton"></a>QRadioButton</h4><p>单选，默认是同父级下所有的radio都是互斥，当然也可以通过QButtonGroup来设置互斥关系。</p><p>通过<strong>setChecked()</strong> 来设置默认选中/不选中，<strong>isChecked()</strong> 判断是否选中。</p><p>通过<strong>setEnabled()，setDisabled()</strong> 来设置控件可用，两个方法都可以，setEnabled(true)/，setDisabled(false)为可用，反之就是禁用。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QButtonGroup&gt;</span></span><br><br>    QButtonGroup* group = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QButtonGroup</span>();<br>    group-&gt;<span class="hljs-built_in">addButton</span>(ui-&gt;radioButton, <span class="hljs-number">0</span>);<br>    group-&gt;<span class="hljs-built_in">addButton</span>(ui-&gt;radioButton_2, <span class="hljs-number">1</span>);<br><br>    ui-&gt;radioButton_2-&gt;<span class="hljs-built_in">setChecked</span>(<span class="hljs-literal">true</span>);<br>    ui-&gt;radioButton-&gt;<span class="hljs-built_in">setDisabled</span>(<span class="hljs-literal">true</span>); <span class="hljs-comment">// ui-&gt;radioButton-&gt;setEnabled(false);</span><br><br></code></pre></td></tr></table></figure><h4 id="QCheckBox"><a href="#QCheckBox" class="headerlink" title="QCheckBox"></a>QCheckBox</h4><p>多选，常用方法与QRadioButton类似，不多说了。</p><h4 id="QComboBox"><a href="#QComboBox" class="headerlink" title="QComboBox"></a>QComboBox</h4><p>下拉选项，与QListView用法类似（不知道还记得QListView这个不）。</p><p>常用的事件**currentIndexChanged(int index)**。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 移除下标为2的数据</span><br>ui-&gt;cmbSex-&gt;<span class="hljs-built_in">removeItem</span>(<span class="hljs-number">2</span>);<br><span class="hljs-comment">// 添加一条数据在最后</span><br>ui-&gt;cmbSex-&gt;<span class="hljs-built_in">addItem</span>(<span class="hljs-string">&quot;test&quot;</span>);<br><span class="hljs-comment">// 插入一条数据在下标2</span><br>ui-&gt;cmbSex-&gt;<span class="hljs-built_in">insertItem</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;test111&quot;</span>);<br><span class="hljs-comment">// 获取当前选中的下标</span><br>ui-&gt;cmbSex-&gt;<span class="hljs-built_in">currentIndex</span>();<br></code></pre></td></tr></table></figure><h4 id="QDateEdit-QTimeEdit-QDateTimeEdit"><a href="#QDateEdit-QTimeEdit-QDateTimeEdit" class="headerlink" title="QDateEdit/QTimeEdit/QDateTimeEdit"></a>QDateEdit/QTimeEdit/QDateTimeEdit</h4><p>时间选择控件，一个是日期，一个是日期+时间，用法基本类似。</p><ul><li>date/time 获取日期/时间</li><li>minimumDate/minimumTime 最小日期/时间</li><li>maximumDate/maximumTime 最大日期/时间</li><li>displayFormat 日期/时间格式化</li></ul><p>除QTimeEdit外，其余两个可通过属性<strong>setCalendarPopup(true)</strong> 设置为弹出日期选择窗口。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>基本上常用的控件就是这几个，当然还有一些其他的表单控件没有说到，后续用的多了就整理下再补充吧。</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>qt</category>
      
    </categories>
    
    
    <tags>
      
      <tag>qt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Qt 系列（五）——数据列表</title>
    <link href="/qt/data_list.html"/>
    <url>/qt/data_list.html</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这篇主要来聊下qt中数据列表的使用，绑定等，当然也都是些比较基础的，不存在什么花里胡哨的东西。</p><h3 id="数据列表"><a href="#数据列表" class="headerlink" title="数据列表"></a>数据列表</h3><p>qt中有单列的<strong>QListView</strong>、<strong>QListWidget</strong>，有表格<strong>QTableView</strong>、<strong>QTableWidget</strong>，有树状菜单<strong>QTreeView</strong>、<strong>QTreeWidget</strong>，具体的区别就是，View基于Model（玩过MVC的应该清楚视图与模型的绑定），Widget直接基于Item，Widget集成View，内部已经实现了默认的Model，通过方法addItem直接可以添加数据，我们主要来看下View的使用，毕竟这种便于数据维护。</p><h4 id="QListView"><a href="#QListView" class="headerlink" title="QListView"></a>QListView</h4><p>列表视图一般用在一些像切换界面，菜单选择等的单列式数据展示，对应的Model为<strong>QStringListModel</strong>，当然也可以用更高级的<strong>QStandardItemModel</strong>，先来看下简单的实现效果。</p><h5 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// .h</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QStringListModel&gt;</span></span><br>...<br><span class="hljs-keyword">private</span>:<br>QStringListModel* m_listModel;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TestWidget::init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>m_listModel = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QStringListModel</span>();<br><br><span class="hljs-built_in">setConnection</span>();<br><span class="hljs-built_in">bindList</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TestWidget::bindList</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>QStringList list;<br>list.<span class="hljs-built_in">append</span>(<span class="hljs-built_in">QStringLiteral</span>(<span class="hljs-string">&quot;龙门石窟&quot;</span>));<br>list.<span class="hljs-built_in">append</span>(<span class="hljs-built_in">QStringLiteral</span>(<span class="hljs-string">&quot;白马寺&quot;</span>));<br>list.<span class="hljs-built_in">append</span>(<span class="hljs-built_in">QStringLiteral</span>(<span class="hljs-string">&quot;关林庙&quot;</span>));<br>m_listModel-&gt;<span class="hljs-built_in">setStringList</span>(list);<br><br>ui-&gt;listView-&gt;<span class="hljs-built_in">setModel</span>(m_listModel);<br><span class="hljs-comment">// 设置间距</span><br>ui-&gt;listView-&gt;<span class="hljs-built_in">setSpacing</span>(<span class="hljs-number">5</span>);<br><span class="hljs-comment">// 默认选中</span><br>QModelIndex index = m_listModel-&gt;<span class="hljs-built_in">index</span>(<span class="hljs-number">0</span>);<br>ui-&gt;listView-&gt;<span class="hljs-built_in">setCurrentIndex</span>(index);<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h5><p>常规的使用，这里只演示下双击事件，其他事件查看QListView的事件机制对应搞就行了，做双击的时候记得先禁用修改事件，默认是双击可以切换成<strong>LineEdit</strong>做修改。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 禁用修改</span><br>ui-&gt;listView-&gt;<span class="hljs-built_in">setEditTriggers</span>(QAbstractItemView::EditTrigger::NoEditTriggers);<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TestWidget::listViewDoubleClicked</span><span class="hljs-params">(<span class="hljs-type">const</span> QModelIndex&amp; index)</span></span><br><span class="hljs-function"></span>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;clicked index : &quot;</span> &lt;&lt; index.<span class="hljs-built_in">row</span>() &lt;&lt; std::endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TestWidget::setConnection</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">connect</span>(ui-&gt;listView, <span class="hljs-built_in">SIGNAL</span>(<span class="hljs-built_in">doubleClicked</span>(<span class="hljs-type">const</span> QModelIndex&amp;)), <span class="hljs-keyword">this</span>, <span class="hljs-built_in">SLOT</span>(<span class="hljs-built_in">listViewDoubleClicked</span>(<span class="hljs-type">const</span> QModelIndex&amp;)));<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="右键菜单"><a href="#右键菜单" class="headerlink" title="右键菜单"></a>右键菜单</h5><p>通过以下方式打开ListView的右键菜单，然后再创建个菜单绑定到ListView中，当然同时也可以绑定QMenu对应Action的事件来做进一步的使用，这个后面用到再进行示例的演示。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 右键菜单</span><br>ui-&gt;listView-&gt;<span class="hljs-built_in">setContextMenuPolicy</span>(Qt::CustomContextMenu);<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TestWidget::init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// ...</span><br>    m_listMenu = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QMenu</span>(ui-&gt;listView);<br>m_listMenu-&gt;<span class="hljs-built_in">addAction</span>(<span class="hljs-string">&quot;test1&quot;</span>);<br>m_listMenu-&gt;<span class="hljs-built_in">addAction</span>(<span class="hljs-string">&quot;test2&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TestWidget::listContextMenuShow</span><span class="hljs-params">(<span class="hljs-type">const</span> QPoint&amp; pos)</span></span><br><span class="hljs-function"></span>&#123;<br>m_listMenu-&gt;<span class="hljs-built_in">exec</span>(ui-&gt;listView-&gt;<span class="hljs-built_in">mapToGlobal</span>(pos));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TestWidget::setConnection</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">connect</span>(ui-&gt;listView, <span class="hljs-built_in">SIGNAL</span>(<span class="hljs-built_in">doubleClicked</span>(<span class="hljs-type">const</span> QModelIndex&amp;)), <span class="hljs-keyword">this</span>, <span class="hljs-built_in">SLOT</span>(<span class="hljs-built_in">listViewDoubleClicked</span>(<span class="hljs-type">const</span> QModelIndex&amp;)));<br>    <span class="hljs-comment">// 绑定右键菜单</span><br><span class="hljs-built_in">connect</span>(ui-&gt;listView, <span class="hljs-built_in">SIGNAL</span>(<span class="hljs-built_in">customContextMenuRequested</span>(<span class="hljs-type">const</span> QPoint&amp;)), <span class="hljs-keyword">this</span>, <span class="hljs-built_in">SLOT</span>(<span class="hljs-built_in">listContextMenuShow</span>(<span class="hljs-type">const</span> QPoint&amp;)));<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="./data_list/1.png" alt="QListView"></p><h4 id="QTableView"><a href="#QTableView" class="headerlink" title="QTableView"></a>QTableView</h4><p>表格视图在一些与数据打交道的应用上尤为常见，根据不同的数据做对应的列展示，数据绑定等比较方便，一般对应的Model为<strong>QStandardItemModel</strong>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// .h</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QStandardItemModel&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-comment">// 定义个数据集合结构体</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">TestItem</span> <br>&#123;<br><span class="hljs-type">int</span> id;<br>QString name;<br><span class="hljs-type">int</span> age;<br><span class="hljs-type">short</span> sex;<br>QString location;<br>&#125;;<br><br><br><span class="hljs-keyword">private</span>:<br>QStandardItemModel* m_tableModel;<br>std::vector&lt;TestItem&gt; m_data;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// .cpp</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TestWidget::bindTable</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>QStringList header;<br>header &lt;&lt; <span class="hljs-string">&quot;id&quot;</span> &lt;&lt; <span class="hljs-built_in">QStringLiteral</span>(<span class="hljs-string">&quot;姓名&quot;</span>) &lt;&lt; <span class="hljs-built_in">QStringLiteral</span>(<span class="hljs-string">&quot;性别&quot;</span>) &lt;&lt; <span class="hljs-built_in">QStringLiteral</span>(<span class="hljs-string">&quot;年龄&quot;</span>) &lt;&lt; <span class="hljs-built_in">QStringLiteral</span>(<span class="hljs-string">&quot;地址&quot;</span>);<br>m_tableModel-&gt;<span class="hljs-built_in">setHorizontalHeaderLabels</span>(header);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m_data.<span class="hljs-built_in">size</span>(); i++)<br>&#123;<br>m_tableModel-&gt;<span class="hljs-built_in">setItem</span>(i, <span class="hljs-number">0</span>, <span class="hljs-keyword">new</span> <span class="hljs-built_in">QStandardItem</span>(QString::<span class="hljs-built_in">number</span>(m_data[i].id)));<br>m_tableModel-&gt;<span class="hljs-built_in">setItem</span>(i, <span class="hljs-number">1</span>, <span class="hljs-keyword">new</span> <span class="hljs-built_in">QStandardItem</span>(m_data[i].name));<br>m_tableModel-&gt;<span class="hljs-built_in">setItem</span>(i, <span class="hljs-number">2</span>, <span class="hljs-keyword">new</span> <span class="hljs-built_in">QStandardItem</span>(m_data[i].sex == <span class="hljs-number">1</span> ? <span class="hljs-built_in">QStringLiteral</span>(<span class="hljs-string">&quot;男&quot;</span>) : <span class="hljs-built_in">QStringLiteral</span>(<span class="hljs-string">&quot;女&quot;</span>)));<br>m_tableModel-&gt;<span class="hljs-built_in">setItem</span>(i, <span class="hljs-number">3</span>, <span class="hljs-keyword">new</span> <span class="hljs-built_in">QStandardItem</span>(QString::<span class="hljs-built_in">number</span>(m_data[i].age)));<br>m_tableModel-&gt;<span class="hljs-built_in">setItem</span>(i, <span class="hljs-number">4</span>, <span class="hljs-keyword">new</span> <span class="hljs-built_in">QStandardItem</span>(m_data[i].location));<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">5</span>; j++)<br>&#123;<br>m_tableModel-&gt;<span class="hljs-built_in">item</span>(i, j)-&gt;<span class="hljs-built_in">setTextAlignment</span>(Qt::AlignCenter);<br>&#125;<br>&#125;<br><br>ui-&gt;tableView-&gt;<span class="hljs-built_in">setModel</span>(m_tableModel);<br><br><span class="hljs-comment">// 选中一整行</span><br>ui-&gt;tableView-&gt;<span class="hljs-built_in">setSelectionBehavior</span>(QAbstractItemView::SelectRows);<br><span class="hljs-comment">// 不显示网格</span><br>ui-&gt;tableView-&gt;<span class="hljs-built_in">setShowGrid</span>(<span class="hljs-literal">false</span>);<br><span class="hljs-comment">// 双色显示</span><br>ui-&gt;tableView-&gt;<span class="hljs-built_in">setAlternatingRowColors</span>(<span class="hljs-literal">true</span>);<br><span class="hljs-comment">// 隐藏垂直标题栏</span><br>ui-&gt;tableView-&gt;<span class="hljs-built_in">verticalHeader</span>()-&gt;<span class="hljs-built_in">hide</span>();<br><span class="hljs-comment">// 列宽自适应</span><br>ui-&gt;tableView-&gt;<span class="hljs-built_in">horizontalHeader</span>()-&gt;<span class="hljs-built_in">setSectionResizeMode</span>(QHeaderView::Stretch);<br><span class="hljs-comment">// 设置默认行高</span><br>ui-&gt;tableView-&gt;<span class="hljs-built_in">verticalHeader</span>()-&gt;<span class="hljs-built_in">setDefaultSectionSize</span>(<span class="hljs-number">40</span>);<br><span class="hljs-comment">// 取消列编辑</span><br>ui-&gt;tableView-&gt;<span class="hljs-built_in">setEditTriggers</span>(QAbstractItemView::NoEditTriggers);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TestWidget::initData</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br>TestItem item;<br>item.id = i + <span class="hljs-number">1</span>;<br>item.name = <span class="hljs-built_in">QString</span>(<span class="hljs-string">&quot;test%1&quot;</span>).<span class="hljs-built_in">arg</span>(i + <span class="hljs-number">1</span>);<br>item.sex = i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span> ? <span class="hljs-number">1</span> : <span class="hljs-number">2</span>;<br>item.age = (i + <span class="hljs-number">1</span>) * <span class="hljs-number">5</span>;<br>item.location = <span class="hljs-built_in">QStringLiteral</span>(<span class="hljs-string">&quot;大洛阳&quot;</span>);<br>m_data.<span class="hljs-built_in">push_back</span>(item);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>至于事件、右键菜单同QListView，这里就不再多说了，看下效果。</p><p><img src="./data_list/2.png" alt="QTableView"></p><h4 id="QTreeView"><a href="#QTreeView" class="headerlink" title="QTreeView"></a>QTreeView</h4><p>树状列表一般像组织架构、系统菜单、角色权限设置、目录结构等会比较常用，个人使用这个确实不多，大致看下用法吧。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// .h</span><br>QStandardItemModel* m_treeModel;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// .cpp</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TestWidget::bindTree</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)<br>&#123;<br>QStandardItem* item = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QStandardItem</span>(<span class="hljs-built_in">QString</span>(<span class="hljs-string">&quot;item %1&quot;</span>).<span class="hljs-built_in">arg</span>(i));<br><br>item-&gt;<span class="hljs-built_in">setCheckable</span>(<span class="hljs-literal">true</span>);<br><span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">3</span>; j++)<br>&#123;<br>QStandardItem* childItem = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QStandardItem</span>(<span class="hljs-built_in">QString</span>(<span class="hljs-string">&quot;child item %1&quot;</span>).<span class="hljs-built_in">arg</span>(j));<br>childItem-&gt;<span class="hljs-built_in">setCheckable</span>(<span class="hljs-literal">true</span>);<br>item-&gt;<span class="hljs-built_in">appendRow</span>(childItem);<br>&#125;<br>&#125;<br>m_treeModel-&gt;<span class="hljs-built_in">setItem</span>(i, item);<br>&#125;<br>ui-&gt;treeView-&gt;<span class="hljs-built_in">setModel</span>(m_treeModel);<br>ui-&gt;treeView-&gt;<span class="hljs-built_in">setHeaderHidden</span>(<span class="hljs-literal">true</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到，实质上<strong>QStandardItem</strong>本身已经支持树型结构，通过<strong>appendRow</strong>来添加子节点。</p><p>其他的像点击啊右键菜单也是类似，至于选中态这种等后续鼓捣过实际用到再补充吧。</p><p><img src="./data_list/3.png" alt="QTreeView"></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>数据展示目的就是为了查阅、维护、做数据分析，少不了后续涉及到增删改查，一个个来吧，鼓捣东西这条路走开了就停不下来了。</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>qt</category>
      
    </categories>
    
    
    <tags>
      
      <tag>qt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Qt 系列（四）——界面切换</title>
    <link href="/qt/change_page.html"/>
    <url>/qt/change_page.html</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>上一篇大致过完窗体，这篇聊下界面的切换，毕竟不管哪个应用一般都不会是单页面。</p><h3 id="界面切换"><a href="#界面切换" class="headerlink" title="界面切换"></a>界面切换</h3><p>界面切换在我个人用的过程中，有几个方式可以分享下。</p><ul><li>Widget 的显示隐藏，在上一篇聊 Widget 的时候应该还有印象是啥效果</li><li>TabWidget，通过选项卡的方式切换界面</li><li>StackedWidget，类似选项卡，不过没有 tab 按钮，推荐是使用这种。</li></ul><p>我们来看下几种方式的实现过程以及效果。</p><p>准备工作：新建工程选择 MainWindow，然后新建三个 Widget 作为单页。</p><p>主窗体 ui 设置如下图所示。</p><p><img src="./change_page/1.png" alt="主窗体界面"></p><h4 id="Widget-显示隐藏"><a href="#Widget-显示隐藏" class="headerlink" title="Widget 显示隐藏"></a>Widget 显示隐藏</h4><p>首先实例化对应的 Widget 这个就不多说了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// .h</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Widget1.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Widget2.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Widget3.h&quot;</span></span><br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">QtDemo</span>(QWidget *parent = Q_NULLPTR);<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-keyword">private</span>:<br>    Ui::QtDemoClass ui;<br><br>    Widget1* m_widget1;<br>    Widget2* m_widget2;<br>    Widget3* m_widget3;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// .cpp</span><br>QtDemo::<span class="hljs-built_in">QtDemo</span>(QWidget *parent)<br>    : <span class="hljs-built_in">QMainWindow</span>(parent)<br>&#123;<br>    ui.<span class="hljs-built_in">setupUi</span>(<span class="hljs-keyword">this</span>);<br>    <span class="hljs-built_in">init</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QtDemo::init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    m_widget1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Widget1</span>(ui.groupBox);<br>    m_widget2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Widget2</span>(ui.groupBox);<br>    m_widget3 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Widget3</span>(ui.groupBox);<br><br>    m_widget2-&gt;<span class="hljs-built_in">hide</span>();<br>    m_widget3-&gt;<span class="hljs-built_in">hide</span>();<br>&#125;<br><br></code></pre></td></tr></table></figure><p>运行之后可以自己看下效果，也可以自己做个测试，如果那两个没有隐藏，效果是啥样（最好给三个界面的 label 位置调整下，可以看的更明显），当然这个不是说明三个 widget 是同层，实际还是不同的层，只是每个 Widget 的内容比较单一，如果设置了背景色就能看出来还是会存在遮挡的，不设置图层的话，一般都是按照 new 的先后顺序，先放的肯定是在最下面。</p><p>我们来设置下按钮事件来做切换，这里捎带聊下 qt 的事件机制，也就是信号、槽。</p><h4 id="信号、槽"><a href="#信号、槽" class="headerlink" title="信号、槽"></a>信号、槽</h4><p>信号槽的模式类似于事件委托，也有点儿像观察者模式，即一方发出信号，由已注册的另一方根据信号做对应事件的响应与处理。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">static</span> QMetaObject::Connection <span class="hljs-title">connect</span><span class="hljs-params">(<span class="hljs-type">const</span> QObject *sender, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *signal,</span></span><br><span class="hljs-params"><span class="hljs-function">                    <span class="hljs-type">const</span> QObject *receiver, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *member, Qt::ConnectionType = Qt::AutoConnection)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">static</span> QMetaObject::Connection <span class="hljs-title">connect</span><span class="hljs-params">(<span class="hljs-type">const</span> QObject *sender, <span class="hljs-type">const</span> QMetaMethod &amp;signal,</span></span><br><span class="hljs-params"><span class="hljs-function">                    <span class="hljs-type">const</span> QObject *receiver, <span class="hljs-type">const</span> QMetaMethod &amp;method,</span></span><br><span class="hljs-params"><span class="hljs-function">                    Qt::ConnectionType type = Qt::AutoConnection)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> QMetaObject::Connection <span class="hljs-title">connect</span><span class="hljs-params">(<span class="hljs-type">const</span> QObject *sender, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *signal,</span></span><br><span class="hljs-params"><span class="hljs-function">                    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *member, Qt::ConnectionType type = Qt::AutoConnection)</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-comment">// qt5以后新增</span><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> QMetaObject::Connection <span class="hljs-title">connect</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">typename</span> QtPrivate::FunctionPointer&lt;Func1&gt;::Object *sender, Func1 signal,</span></span><br><span class="hljs-params"><span class="hljs-function">                                 <span class="hljs-type">const</span> <span class="hljs-keyword">typename</span> QtPrivate::FunctionPointer&lt;Func2&gt;::Object *receiver, Func2 slot,</span></span><br><span class="hljs-params"><span class="hljs-function">                                 Qt::ConnectionType type = Qt::AutoConnection)</span></span><br></code></pre></td></tr></table></figure><p>通过这几个方法可以实现事件的绑定，发送方-&gt;接收方（通过哪种信号，以及接收方处理的方法）。</p><p>信号槽的特点如下：</p><ul><li>一个信号可以绑定多个槽</li><li>多个信号可以绑定一个槽</li><li>一个信号可以关联到另一个信号</li><li>一个信号可以关联到多个信号</li></ul><p>回归到我们第一个实现方式的编码来，在头文件新加几个按钮点击的方法（注意 btn3 的事件没有在 slots 标签下）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// .h</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">QtDemo</span>(QWidget *parent = Q_NULLPTR);<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">btnWidget3Clicked</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-keyword">public</span> slots:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">btnWidget1Clicked</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">btnWidget2Clicked</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure><p>在 cpp 中实现对应的方法事件，同样留意 btn3 的写法（qt5 以上可以这样使用）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// .cpp</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QtDemo::btnWidget1Clicked</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    m_widget1-&gt;<span class="hljs-built_in">show</span>();<br>    m_widget2-&gt;<span class="hljs-built_in">hide</span>();<br>    m_widget3-&gt;<span class="hljs-built_in">hide</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QtDemo::btnWidget2Clicked</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    m_widget1-&gt;<span class="hljs-built_in">hide</span>();<br>    m_widget2-&gt;<span class="hljs-built_in">show</span>();<br>    m_widget3-&gt;<span class="hljs-built_in">hide</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QtDemo::btnWidget3Clicked</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    m_widget1-&gt;<span class="hljs-built_in">hide</span>();<br>    m_widget2-&gt;<span class="hljs-built_in">hide</span>();<br>    m_widget3-&gt;<span class="hljs-built_in">show</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QtDemo::setConnection</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">connect</span>(ui.btnWidget1, <span class="hljs-built_in">SIGNAL</span>(<span class="hljs-built_in">clicked</span>()), <span class="hljs-keyword">this</span>, <span class="hljs-built_in">SLOT</span>(<span class="hljs-built_in">btnWidget1Clicked</span>()));<br>    <span class="hljs-built_in">connect</span>(ui.btnWidget2, <span class="hljs-built_in">SIGNAL</span>(<span class="hljs-built_in">clicked</span>()), <span class="hljs-keyword">this</span>, <span class="hljs-built_in">SLOT</span>(<span class="hljs-built_in">btnWidget2Clicked</span>()));<br>    <span class="hljs-built_in">connect</span>(ui.btnWidget3, &amp;QPushButton::clicked, <span class="hljs-keyword">this</span>, &amp;QtDemo::btnWidget3Clicked);<br>&#125;<br></code></pre></td></tr></table></figure><p>运行之后点击按钮，就实现了界面的切换。</p><h4 id="TabWidget-实现界面切换"><a href="#TabWidget-实现界面切换" class="headerlink" title="TabWidget 实现界面切换"></a>TabWidget 实现界面切换</h4><p>这个比较简单，我们可以直接通过界面直接添加 Tab Widget 组件来直接切换界面，这里我拿 widget1 做了调整。</p><p><img src="./change_page/2.png" alt="添加TabWidget"></p><p>用过选项卡的肯定都清楚，本身选项卡内就是一个个 Widget，也就相当于是一个个单独的界面。</p><p>我们也可以通过代码动态去添加已经写好的界面。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++">m_widget3 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Widget3</span>();<br>ui-&gt;tabWidget-&gt;<span class="hljs-built_in">addTab</span>(m_widget3, <span class="hljs-built_in">QStringLiteral</span>(<span class="hljs-string">&quot;界面3&quot;</span>));<br></code></pre></td></tr></table></figure><h4 id="StackedWidget-实现界面切换"><a href="#StackedWidget-实现界面切换" class="headerlink" title="StackedWidget 实现界面切换"></a>StackedWidget 实现界面切换</h4><p>这个堆小部件的大致用法与<strong>TabWidget</strong>类似，不过它没有选项卡的直接切换，需要通过按钮事件来自己去设置显示哪个索引下的 widget。</p><p>修改对应方法如下，每次 addWidget 相当于添加一个 Page，可以理解为存放界面的数组。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QtDemo::btnWidget1Clicked</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ui.stackedWidget-&gt;<span class="hljs-built_in">setCurrentIndex</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QtDemo::btnWidget2Clicked</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ui.stackedWidget-&gt;<span class="hljs-built_in">setCurrentIndex</span>(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QtDemo::btnWidget3Clicked</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ui.stackedWidget-&gt;<span class="hljs-built_in">setCurrentIndex</span>(<span class="hljs-number">2</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QtDemo::init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    m_widget1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Widget1</span>();<br>    m_widget2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Widget2</span>();<br>    m_widget3 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Widget3</span>();<br><br>    ui.stackedWidget-&gt;<span class="hljs-built_in">addWidget</span>(m_widget1);<br>    ui.stackedWidget-&gt;<span class="hljs-built_in">addWidget</span>(m_widget2);<br>    ui.stackedWidget-&gt;<span class="hljs-built_in">addWidget</span>(m_widget3);<br><br>    <span class="hljs-built_in">setConnection</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>界面切换暂时就聊这么多，这仅是个人使用过程中总结的，可能不是太合适，不过效果跟预期还是一样的，建议使用 StackedWidget 来实现界面的切换，当然 TabWidget 去了 tab 跟这个显示的就基本一样了，这种相对来说维护方便些，切换只需要设置对应的索引显示就行，同第一种比较还是便利许多（毕竟第一种如果界面多了，那每次显示隐藏都要写一堆）。</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>qt</category>
      
    </categories>
    
    
    <tags>
      
      <tag>qt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Qt 系列（三）——窗体</title>
    <link href="/qt/win.html"/>
    <url>/qt/win.html</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这篇来认识下Qt中的三个窗口类，<strong>MainWindow、Widget、Dialog</strong>。</p><h3 id="MainWindow"><a href="#MainWindow" class="headerlink" title="MainWindow"></a>MainWindow</h3><p>这个作为一个程序的主窗口，拥有menu菜单栏、tool工具栏、status状态栏、任务栏右侧托盘等，相当于是一个大的窗体架子。</p><p>一个mainwindow中可以放置多个widget，下一篇聊下多界面的切换。</p><p>这里可以新建的qt工程选MainWindow，或者在原来的demo工程上，可以再重新添加回初始的菜单栏、工具栏、状态栏来做下测试。</p><h4 id="QMenu"><a href="#QMenu" class="headerlink" title="QMenu"></a>QMenu</h4><p><img src="./win/1.png" alt="MainWindow设置"></p><p>新建完这些栏，双击菜单栏开始新建菜单，编辑菜单，菜单名称选中对应菜单，在属性栏中找<strong>QMenu</strong>，在这一区域设置<strong>text</strong>属性可以修改成中文。</p><p><img src="./win/2.png" alt="菜单"></p><p>当然也可以通过程序里来动态添加菜单，代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QtDemo::addMenu</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 添加菜单</span><br>    QMenu* menu = <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">menuBar</span>()-&gt;<span class="hljs-built_in">addMenu</span>(<span class="hljs-string">&quot;backend_add&quot;</span>);<br>    <span class="hljs-comment">// 添加菜单下按钮</span><br>    QAction* action1 = menu-&gt;<span class="hljs-built_in">addAction</span>(<span class="hljs-string">&quot;add_1&quot;</span>);<br>    QMenu* childMenu = menu-&gt;<span class="hljs-built_in">addMenu</span>(QString::<span class="hljs-built_in">fromLocal8Bit</span>(<span class="hljs-string">&quot;中文&quot;</span>));<br>    QAction* action2 = childMenu-&gt;<span class="hljs-built_in">addAction</span>(QString::<span class="hljs-built_in">fromLocal8Bit</span>(<span class="hljs-string">&quot;菜单2&quot;</span>));<br>    QAction* action3 = childMenu-&gt;<span class="hljs-built_in">addAction</span>(<span class="hljs-built_in">tr</span>(<span class="hljs-string">&quot;菜单3&quot;</span>));<br>    QAction* action4 = childMenu-&gt;<span class="hljs-built_in">addAction</span>(<span class="hljs-built_in">QStringLiteral</span>(<span class="hljs-string">&quot;菜单4&quot;</span>));<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这里穿插下中文，当然这主要是在windows上会出现中文乱码比较频繁，因为系统默认是GB2312，vs也是默认GB2312（肯定是可以修改utf-8，只是懒得改），这里有几个方式显示中文，也就是上面代码展示的，回头找时间鼓捣完中文这块单独再写，常用的方式就是除了<strong>tr</strong>，这玩意儿确实是为了多语言，需要先整理好多语言的对应文件。</p><p>来看下运行后菜单的效果。</p><p><img src="./win/3.png" alt="ui设置"></p><p><img src="./win/4.png" alt="程序设置"></p><p>乱码的情况上面也说了，tr是为了国际化使用的，在没有设置编码格式的时候，编辑器也不知道要用哪种。</p><h4 id="QToolBar"><a href="#QToolBar" class="headerlink" title="QToolBar"></a>QToolBar</h4><p>这个因为没咋用过，也试了下发下从designer这没法往里丢控件，看来是只能通过代码去添加Action了,不过总的来看这玩意儿是个DockPanel（跟vs里这窗口栏那窗口栏一样，拖哪自己定）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QtDemo::addTool</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    QAction* action = ui-&gt;toolBar-&gt;<span class="hljs-built_in">addAction</span>(<span class="hljs-string">&quot;action1&quot;</span>);<br>    <span class="hljs-comment">// 添加个右侧工具栏</span><br>    QToolBar* toolbar = <span class="hljs-keyword">new</span> <span class="hljs-built_in">QToolBar</span>();<br>    <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">addToolBar</span>(Qt::ToolBarArea::RightToolBarArea, toolbar);<br>    toolbar-&gt;<span class="hljs-built_in">setMovable</span>(<span class="hljs-literal">false</span>);<br>    QAction* action1 = toolbar-&gt;<span class="hljs-built_in">addAction</span>(<span class="hljs-built_in">QStringLiteral</span>(<span class="hljs-string">&quot;工具栏&quot;</span>));<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="QStatusBar"><a href="#QStatusBar" class="headerlink" title="QStatusBar"></a>QStatusBar</h4><p>状态栏这个，像大多数应用程序需要有个提示进度啊或者提示信息之类的，就可以直接在这个区域丢控件了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QtDemo::addStatus</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// ui-&gt;statusBar-&gt;addWidget(new QLabel(QStringLiteral(&quot;这是状态栏&quot;)));</span><br>    ui-&gt;statusBar-&gt;<span class="hljs-built_in">addPermanentWidget</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">QLabel</span>(<span class="hljs-built_in">QStringLiteral</span>(<span class="hljs-string">&quot;这是状态栏111&quot;</span>)));<br>    ui-&gt;statusBar-&gt;<span class="hljs-built_in">showMessage</span>(<span class="hljs-string">&quot;test1111&quot;</span>, <span class="hljs-number">5000</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>最终所有的设置完成后，效果如下。</p><p><img src="./win/5.png" alt="效果"></p><h3 id="QWidget"><a href="#QWidget" class="headerlink" title="QWidget"></a>QWidget</h3><p>窗体小部件，它是所有窗口界面的基类，接收用户交互，界面展示，所有子控件可以放在widget下，如果细看的话，本身选MainWindow默认会有个Widget名字叫<strong>centralWidget</strong>。</p><p>我们来新建个测试用的Widget，然后给这个新建的ui里只放个Label，内容自己随便写，之后回到MainWindow的头文件，声明这个Widget，在cpp里new一个，隐藏掉原有的centralWidget（当然不隐藏也可以，两个Widget会同时显示，不好看）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// .h</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;TestWidget.h&quot;</span></span><br>...<br>    TestWidget* widget;<br>...<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// .cpp</span><br>    ui-&gt;centralWidget-&gt;<span class="hljs-built_in">hide</span>();<br>    widget = <span class="hljs-keyword">new</span> <span class="hljs-built_in">TestWidget</span>(<span class="hljs-keyword">this</span>);<br></code></pre></td></tr></table></figure><p>显示的效果就不再截图了，就是在当前的Window展示另一个Widget的ui界面，做界面切换也可以采用这种显示隐藏的方式来做。</p><h3 id="QDialog"><a href="#QDialog" class="headerlink" title="QDialog"></a>QDialog</h3><p>对话框一般是用于与用户交互，比如消息对话框（提示框、确认框等）、文件选择、颜色选择或者是常用的像弹框表单啊详情界面啊之类的。</p><p>对话框分为模态和非模态（说白点儿就是让不让你点别的地方）。</p><p>新建个Dialog试下效果，之后还是给Widget那个类似，声明然后实现。</p><div class="note note-warning">            <p>如果不是在dialog类的初始化就做显示，这里new完之后还是需要手动show()一下，所有的Widget都有show(),hide()等方法，具体使用可以自己摸索。</p>          </div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++">dialog = <span class="hljs-keyword">new</span> <span class="hljs-built_in">TestDialog</span>();<br>dialog-&gt;<span class="hljs-built_in">show</span>();<br></code></pre></td></tr></table></figure><h3 id="Widget常用方法"><a href="#Widget常用方法" class="headerlink" title="Widget常用方法"></a>Widget常用方法</h3><p>比如说，不想要标题栏，任务栏不显示，置顶等等，可以参照下面。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">setWindowFlags</span>(Qt::FramelessWindowHint | Qt::Tool | Qt::WindowStaysOnTopHint);<br></code></pre></td></tr></table></figure><table><thead><tr><th>WindowsFlags</th><th>效果</th></tr></thead><tbody><tr><td>Qt::FramelessWindowHint</td><td>去掉标题栏</td></tr><tr><td>Qt::Tool</td><td>任务栏不显示</td></tr><tr><td>Qt::WindowStaysOnTopHint</td><td>置顶</td></tr><tr><td>Qt::WindowMinimizeButtonHint</td><td>显示最小化按钮</td></tr><tr><td>Qt::WindowMaximizeButtonHint</td><td>显示最大化按钮</td></tr><tr><td>Qt::WindowMinMaxButtonsHint</td><td>显示最小最大化按钮</td></tr><tr><td>Qt::WindowCloseButtonHint</td><td>显示关闭按钮</td></tr></tbody></table><p>其他的后续用到再补充吧。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>基本上窗体这块儿就聊这么多吧，每个里面其实展开来搞还是有一大堆东西，不过三个类有区别但是毕竟都是同父，相似之处还是挺多，鼓捣时间长了就熟了。</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>qt</category>
      
    </categories>
    
    
    <tags>
      
      <tag>qt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Qt系列（二）——布局</title>
    <link href="/qt/layout.html"/>
    <url>/qt/layout.html</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这篇主要聊下关于 Qt 中布局的应用，也是一个界面设计的基础。</p><h3 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h3><p>Qt 控件列表中最上面就是布局，自带的有四个布局</p><ul><li><strong>Vertical Layout</strong>(纵向布局)</li><li><strong>Horizontal Layout</strong>(横向布局)</li><li><strong>Grid Layout</strong>(栅格布局)</li><li><strong>Form Layout</strong>(表单布局)</li></ul><div class="note note-success">            <p>建议是通过放一个<strong>Group Box</strong>来做布局的父级，通过右键设置布局来修改对应的 Widget 类的布局。</p>          </div><p>双击.ui 文件，默认应该是打开了 QDesigner，删除默认生成的工具栏相关的，先来四个 GroupBox 丢到主窗口中，如下操作设置为栅格布局（四等分）。<br><img src="./layout/1.png" alt="布局"></p><p>设置之后，我们来看下效果。</p><p><img src="./layout/2.png" alt="栅格布局"></p><p>布局属性主要是设置上、下、左、右间距（同 css 中的==margin-top/bottom/left/right==）,行间距、列间距，布局中控件比例，布局尺寸约束。</p><p>在第一个、第二个 Group 中丢三个<strong>PushButton</strong>，第三个丢几个<strong>Label</strong>与<strong>Line Edit</strong>，第四个丢几个<strong>PushButton</strong>。（这只是为了演示）</p><p>接下来我们分别设置第一个 Group 为纵向布局，第二个为横向布局，第三个为表单布局，第四个不设置，然后给所有的 button 设置 sizePolicy 都为 Expanding，根据自己的想法设置布局中控件占比，比如我设置纵向与横向的是 2:1:1，1:3:1。</p><p>如果丢的位置足够准确的话，不出意外应该是如下界面：</p><p><img src="./layout/3.png" alt="布局演示"></p><p>做完这些可能会有些迷，搞这个干啥，直接拖控件放好对应的 x,y 位置不是更省事，这里我们来运行下程序，看下效果，可以对应调整下界面大小就清楚了。</p><p><img src="./layout/4.png" alt="正常大小"></p><p><img src="./layout/5.png" alt="缩小窗口后"></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>布局个人感觉，一是为了界面整洁统一，二是为了方便做自适应，所以接触 qt 最好还是从布局开始，方便自己去放控件，也方便后续有不同分辨率大小的需求时不至于改动太大（当然这也不是万能的，比如某些自绘控件或者比较复杂的界面布局时还是直接丢设置 xy 最省事）。</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>qt</category>
      
    </categories>
    
    
    <tags>
      
      <tag>qt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Qt系列（一）——初识界面</title>
    <link href="/qt/interface.html"/>
    <url>/qt/interface.html</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>如果使用的是<strong>Visual Studio</strong>编程的话，注意除了安装 qt 外还需要装一个<strong>Qt Vs Tools</strong>这个插件，这一系列使用的都是通过 vs 来做 qt 的开发，当然对于 QCreator 来说并没有太大区别，除了工程配置外，其他东西基本类似</p><h3 id="新建工程"><a href="#新建工程" class="headerlink" title="新建工程"></a>新建工程</h3><p>如图所示，新建一个<strong>Qt Widgets Application</strong>，这是创建一个默认的常规型窗口工程，当然熟悉 qt 的可以直接创建一个 empty 来自己去创建需要的 window 或 widget 之类的工程。</p><p><img src="./interface/1.png" alt="创建工程"></p><p>在选择窗体这地方，可以选择 MainWindow/Widget/Dialog，这里选择<strong>MainWindow</strong>，有关这三个的区别，大致上 MainWindow 顾名思义就是主窗口，可以包含菜单、工具栏、状态条的主窗口，Dialog 是对话框的基类，Widget 是所有界面对象的基类。</p><div class="note note-warning">            <p>在选择窗体这个地方，留意下选择<strong>MainWindow</strong>下方的<strong>Ui Class Inclusion as</strong>，这里有三个选项，默认是==Member==，最好是选择==Member Pointer==，创建工程后默认析构函数会删除 ui 这个指针对象释放内存。</p>          </div><p><img src="./interface/2.png" alt="选择窗体"></p><h3 id="目录介绍"><a href="#目录介绍" class="headerlink" title="目录介绍"></a>目录介绍</h3><p><img src="./interface/3.png" alt="工程目录"></p><div class="note note-warning">            <p>这里注意我这是英文，可能有些的生成直接是中文的筛选器(Folder)</p>          </div><ul><li><strong>Form Files</strong> 存放*.ui 界面文件</li><li><strong>Header Files</strong> 存放 c++的.h 等头文件</li><li><strong>Resource Files</strong> 存放.qrc 等资源文件</li><li><strong>Source Files</strong> 存放 c++的.cpp 等源文件</li></ul><h3 id="编译运行"><a href="#编译运行" class="headerlink" title="编译运行"></a>编译运行</h3><p>不出意外的话是有下面的提示，一般安装 qt 如果没有配置环境变量之类的话（比如说我从其他地方拷了一份 qt 的 release 库），在可执行程序目录需要将 qt 目录下的<strong>platform</strong>拷过来，为了节省本身大小可以只拷 platform 下的<strong>qwindows.dll</strong>，但是目录还是要保持一致的。</p><p><img src="./interface/4.png" alt="错误"></p><p>一般这时候就能正常打开一个只有标题栏的窗体，我们来看下.ui 的内容。</p><p><img src="./interface/5.png" alt="设计界面"></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>大致了解 Qt 的创建工程之后，下来就开始一步步使用 Qt 的控件、事件、封装的库来一步步尝试吧。</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>qt</category>
      
    </categories>
    
    
    <tags>
      
      <tag>qt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Qt系列教程</title>
    <link href="/coding/qt_series.html"/>
    <url>/coding/qt_series.html</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本系列主要就个人使用 qt 的过程做记录</p><h3 id="Qt"><a href="#Qt" class="headerlink" title="Qt"></a>Qt</h3><p>对于客户端开发来说，能用的客户端开发程序其实也是不少，大概列几个自己用过的吧。</p><table>    <tr>        <td>编程语言</td>        <td>GUI库</td>    </tr>    <tr>        <td rowspan="2">c++</td>        <td>mfc</td>    </tr>    <tr>        <td>qt</td>    </tr>    <tr>        <td rowspan="2">C#</td>        <td>Winform</td>    </tr>    <tr>        <td>Wpf</td>    </tr>    <tr>        <td>go</td>        <td>electron</td>    </tr></table><p>每个 GUI 库都有自己的特点，比如 Winform 与 mfc 更适合 windows 开发，Wpf 也一样（界面会比那俩好操作），electron 用的不是太多就不过多评价，<strong>Qt</strong>只是在这记录下，不代表它比其他几个就好，当然跨平台是个特色，另外就是集成的类库比较多（数据库，串口，tcp，统计图等等）</p><h3 id="系列教程"><a href="#系列教程" class="headerlink" title="系列教程"></a>系列教程</h3><p>下载安装这些就不再赘述了，个人认为如果连编程工具都装不了，面向百度、google 的编程方式也不会的话，基本可以告别敲代码了，整个系列 qt 版本 5.9.2，vs2019，c++14。</p><p><a href="/qt/interface.html">Qt 系列（一）——初识界面</a><br><a href="/qt/layout.html">Qt 系列（二）——布局</a><br><a href="/qt/win.html">Qt 系列（三）——窗体</a><br><a href="/qt/change_page.html">Qt 系列（四）——界面切换</a><br><a href="/qt/data_list.html">Qt 系列（五）——数据列表</a><br><a href="/qt/form.html">Qt 系列（六）——表单</a><br><a href="/qt/database.html">Qt 系列（七）——数据库</a><br><a href="/qt/chart.html">Qt 系列（八）——统计图</a><br><a href="/qt/style.html">Qt 花里胡哨系列（一）——QStyleSheet</a><br>[Qt 花里胡哨系列（二）——对话框]<br>[Qt 花里胡哨系列（三）——自定义控件]<br>[Qt 花里胡哨系列（四）——自定义信号和槽]</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>qt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022,新的开始</title>
    <link href="/life/new_start.html"/>
    <url>/life/new_start.html</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>新的一年转眼已经来到，回头看 2021 立的 flag，做了一些，又拉下不少，西西凉凉也算是过了一年。</p><span id="more"></span><h3 id="2021-立下的-flag"><a href="#2021-立下的-flag" class="headerlink" title="2021 立下的 flag"></a>2021 立下的 flag</h3><p>程序猿</p><ul><li><input disabled="" type="checkbox"> SSO 开发</li><li><input disabled="" type="checkbox"> Util 维护</li><li><input checked="" disabled="" type="checkbox"> 基于.net5 示例工程</li><li><input disabled="" type="checkbox"> qt 工具助手开发</li><li><input disabled="" type="checkbox"> wpf 工具维护</li><li><input checked="" disabled="" type="checkbox"> 继续接单子</li></ul><p>生活</p><ul><li><input checked="" disabled="" type="checkbox"> 组装电脑</li><li><input disabled="" type="checkbox"> 带孩子</li><li><input disabled="" type="checkbox"> 减肥到 75</li></ul><h3 id="总结下"><a href="#总结下" class="headerlink" title="总结下"></a>总结下</h3><p>对于编程这块儿，总得来说进展不是太大，毕竟工作占据了大部分时间，有了孩子之后精力也明显感觉大不如从前，虽说还是二十出头，但是平均下来 5 小时的睡眠，还是有点儿扛不住啊，人不服老不行了。</p><h3 id="2022，重新开始"><a href="#2022，重新开始" class="headerlink" title="2022，重新开始"></a>2022，重新开始</h3><ul><li><input disabled="" type="checkbox"> April.Admin5 的完善</li><li><input disabled="" type="checkbox"> SSO 开发</li><li><input disabled="" type="checkbox"> qt,wpf 桌面工具开发</li><li><input disabled="" type="checkbox"> 单子不能废</li><li><input disabled="" type="checkbox"> 减肥,减肥,减肥</li></ul>]]></content>
    
    
    <categories>
      
      <category>生活琐事</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
